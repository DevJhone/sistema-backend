const express = require("express");
const router = express.Router();
const db = require("../config/db");

// üîπ Fun√ß√£o para criar uma nova notifica√ß√£o
const criarNotificacao = (mensagem) => {
    const sql = "INSERT INTO notificacoes (mensagem, lida) VALUES (?, 0)";
    db.query(sql, [mensagem], (err, result) => {
        if (err) {
            console.error("‚ùå Erro ao criar notifica√ß√£o:", err);
        } else {
            console.log("‚úÖ Notifica√ß√£o criada com sucesso!");
        }
    });
};

// üîπ Rota para listar todas as notifica√ß√µes
router.get("/", (req, res) => {
    const sql = "SELECT * FROM notificacoes ORDER BY criada_em DESC";

    db.query(sql, (err, result) => {
        if (err) {
            console.error("‚ùå Erro ao buscar notifica√ß√µes:", err);
            return res.status(500).json({ error: "Erro ao buscar notifica√ß√µes." });
        }
        res.status(200).json(result);
    });
});

// üîπ Rota para marcar uma notifica√ß√£o como lida
router.put("/:id", (req, res) => {
    const { id } = req.params;

    // Verifica√ß√£o se o ID √© um n√∫mero v√°lido
    if (isNaN(id)) {
        return res.status(400).json({ error: "ID inv√°lido." });
    }

    const sql = "UPDATE notificacoes SET lida = 1 WHERE id = ?";
    db.query(sql, [id], (err, result) => {
        if (err) {
            console.error("‚ùå Erro ao marcar notifica√ß√£o como lida:", err);
            return res.status(500).json({ error: "Erro ao atualizar notifica√ß√£o." });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "Notifica√ß√£o n√£o encontrada." });
        }

        res.status(200).json({ message: "‚úÖ Notifica√ß√£o marcada como lida." });
    });
});

// üîπ Exportando corretamente
module.exports = router;
module.exports.criarNotificacao = criarNotificacao;
